# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = ../../../../testing/gtest

# Where to find user code.
USER_BASE_DIR = ../base
USER_MEM_DIR = ../memory

# Where to find tests
BASE_TEST_DIR = ./base
MEM_TEST_DIR = ./memory
COMMON_TEST_DIR = ./common

# Flags passed to the preprocessor.
CPPFLAGS += -I$(GTEST_DIR) -I$(GTEST_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Werror #-pedantic

# Base tests
BASE_TESTS = MountManager_test Node_test FileHandle_test PathHandle_test

# Memory tests
MEM_TESTS = MemMount_test MemNode_test MemFileHandle_test

# Comprehensive tests
COMP_TESTS = All_test


TESTS = $(BASE_TESTS) $(MEM_TESTS) $(COMP_TESTS)

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

all : $(TESTS)

base: $(BASE_TESTS)

mem: $(MEM_TESTS)

clean :
	rm -f $(TESTS) gtest.a gtest_main.a *.o

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Build tests for base and memory using gtest_main.a
MountManagerTest.o: $(BASE_TEST_DIR)/MountManagerTest.cc $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(BASE_TEST_DIR)/MountManagerTest.cc

NodeTest.o: $(BASE_TEST_DIR)/NodeTest.cc \
          $(USER_BASE_DIR)/Node.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(BASE_TEST_DIR)/NodeTest.cc

PathHandleTest.o: $(BASE_TEST_DIR)/PathHandleTest.cc \
          $(USER_BASE_DIR)/PathHandle.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(BASE_TEST_DIR)/PathHandleTest.cc

MemNodeTest.o: $(MEM_TEST_DIR)/MemNodeTest.cc \
          $(USER_MEM_DIR)/MemNode.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(MEM_TEST_DIR)/MemNodeTest.cc

MemMountTest.o: $(MEM_TEST_DIR)/MemMountTest.cc \
          $(USER_MEM_DIR)/MemMount.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(MEM_TEST_DIR)/MemMountTest.cc

MemFileHandleTest.o: $(MEM_TEST_DIR)/MemFileHandleTest.cc \
          $(USER_MEM_DIR)/MemFileHandle.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(MEM_TEST_DIR)/MemFileHandleTest.cc

FileHandleTest.o: $(BASE_TEST_DIR)/FileHandleTest.cc $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(BASE_TEST_DIR)/FileHandleTest.cc

AllTest.o: $(COMMON_TEST_DIR)/AllTest.cc $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(COMMON_TEST_DIR)/AllTest.cc

Node.o: $(USER_BASE_DIR)/Node.cc $(USER_BASE_DIR)/Node.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_BASE_DIR)/Node.cc

MemNode.o: $(USER_MEM_DIR)/MemNode.cc $(USER_MEM_DIR)/MemNode.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_MEM_DIR)/MemNode.cc

MemMount.o: $(USER_MEM_DIR)/MemMount.cc \
            $(USER_MEM_DIR)/MemMount.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_MEM_DIR)/MemMount.cc

MemFileHandle.o: $(USER_MEM_DIR)/MemFileHandle.cc \
                 $(USER_MEM_DIR)/MemFileHandle.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_MEM_DIR)/MemFileHandle.cc

MountManager.o: $(USER_BASE_DIR)/MountManager.cc \
                $(USER_BASE_DIR)/MountManager.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_BASE_DIR)/MountManager.cc

PathHandle.o: $(USER_BASE_DIR)/PathHandle.cc \
               $(USER_BASE_DIR)/PathHandle.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_BASE_DIR)/PathHandle.cc

MountManager_test: PathHandle.o MountManager.o Node.o MemMount.o MemNode.o \
                   MemFileHandle.o MountManagerTest.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ -o $@

Node_test: Node.o NodeTest.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ -o $@

PathHandle_test: PathHandle.o PathHandleTest.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ -o $@

FileHandle_test: FileHandleTest.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ -o $@

MemNode_test: MemNode.o Node.o MemMount.o MemNodeTest.o \
              PathHandle.o MemFileHandle.o Node.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ -o $@

MemMount_test: MemMount.o PathHandle.o MemNode.o MemMountTest.o \
               MemFileHandle.o Node.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ -o $@

MemFileHandle_test: MemFileHandle.o MemNode.o MemMount.o MemFileHandleTest.o \
                    Node.o PathHandle.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ -o $@

All_test: AllTest.o MountManager.o Node.o PathHandle.o \
          MemMount.o MemNode.o MemFileHandle.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ -o $@

